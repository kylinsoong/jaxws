package com.kylin.jaxws.wsat.ws;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.apache.log4j.Logger;

import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.6 in JDK 6 Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "RestaurantServiceATService", targetNamespace = "https://github.com/kylinsoong/jaxws")
public class RestaurantServiceATService extends Service {

    private final static URL RESTAURANTSERVICEATSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(RestaurantServiceATService.class);

    static {
    	logger.info("initial RESTAURANTSERVICEATSERVICE_WSDL_LOCATION");
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = RestaurantServiceATService.class.getResource(".");
            url = new URL(baseUrl, "RestaurantServiceAT.wsdl");
        } catch (MalformedURLException e) {
            logger.error("Failed to create URL for the wsdl Location: 'RestaurantServiceAT.wsdl', retrying as a local file", e);
        }
        RESTAURANTSERVICEATSERVICE_WSDL_LOCATION = url;
    }

    public RestaurantServiceATService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RestaurantServiceATService() {
        super(RESTAURANTSERVICEATSERVICE_WSDL_LOCATION, new QName(
                "https://github.com/kylinsoong/jaxws", "RestaurantServiceATService"));
    }

    /**
     * 
     * @return returns RestaurantServiceAT
     */
    @WebEndpoint(name = "RestaurantServiceAT")
    public RestaurantServiceAT getRestaurantServiceAT() {
        return super.getPort(
                new QName("https://github.com/kylinsoong/jaxws", "RestaurantServiceAT"),
                RestaurantServiceAT.class);
    }

    /**
     * 
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the
     *        <code>features</code> parameter will have their default values.
     * @return returns RestaurantServiceAT
     */
    @WebEndpoint(name = "RestaurantServiceAT")
    public RestaurantServiceAT getRestaurantServiceAT(WebServiceFeature... features) {
        return super.getPort(
                new QName("https://github.com/kylinsoong/jaxws", "RestaurantServiceAT"),
                RestaurantServiceAT.class, features);
    }

}
